library(httr)
library(rvest)
get_wiki_covid19_page <- function() {
# Our target COVID-19 wiki page URL is: https://en.wikipedia.org/w/index.php?title=Template:COVID-19_testing_by_country
# Which has two parts:
# 1) base URL `https://en.wikipedia.org/w/index.php
# 2) URL Query string: `title=Template:COVID-19_testing_by_country`
# Wiki page base
wiki_base_url <- "https://en.wikipedia.org/w/index.php"
# You will need to create a List which has an element called `title` to specify which page you want to get from Wiki
# in our case, it will be `Template:COVID-19_testing_by_country`
query_string <- list(title = "Template:COVID-19_testing_by_country")
# - Use the `GET` function in httr library with a `url` argument and a `query` argument to get a HTTP response
response <- GET(wiki_base_url, query = query_string)
# Use the `return` function to return the response
return(response)
}
get_wiki_covid19_page()
print(response)
response = get_wiki_covid19_page()
print(response)
View(response)
wiki_node <- read_html(get_wiki_covid19_page())
wiki_node
table_node <- html_nodes(wiki_node, "table")
table_node
data_frame <- as.data.frame(html_table(table_node[2]))
head(data_frame)
# ====================== Step 3  ======================
# Print the summary of the data frame
summary(data_frame)
df_preprocess <- function(data_frame) {
shape <- dim(data_frame)
# Remove the World row
data_frame <- data_frame[!(data_frame$`Country.or.region`=="World"),]
# Remove the last row
data_frame <- data_frame[1:172, ]
# We dont need the Units and Ref columns, so can be removed
data_frame["Ref."] <- NULL
data_frame["Units.b."] <- NULL
# Renaming the columns
names(data_frame) <- c("country", "date", "tested", "confirmed", "confirmed.tested.ratio", "tested.population.ratio", "confirmed.population.ratio")
# Convert column data types
# Convert column data types
data_frame$country <- as.factor(data_frame$country)
data_frame$date <- as.factor(data_frame$date)
data_frame$tested <- as.numeric(gsub(",","",data_frame$tested))
data_frame$confirmed <- as.numeric(gsub(",","",data_frame$confirmed))
data_frame$'confirmed.tested.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.tested.ratio`))
data_frame$'tested.population.ratio' <- as.numeric(gsub(",","",data_frame$`tested.population.ratio`))
data_frame$'confirmed.population.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.population.ratio`))
return(data_frame)
}
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess(data_frame)
# call df_preprocess() function and assign it to a new data frame
df_preprocessed1 <- df_preprocess(data_frame)
head(df_preprocessed1)
View(df_preprocessed1)
View(data_frame)
df_preprocessed2 <- df_preprocess2(data_frame)
df_preprocess2 <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date`,
tested = `Total.tests`,
confirmed = `Total.cases`,
`confirmed.tested.ratio` = `Cases.tests.ratio`,
`tested.population.ratio` = `Tests.population.ratio`,
`confirmed.population.ratio` = `Cases.population.ratio`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed.tested.ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested.population.ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed.population.ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocessed2 <- df_preprocess2(data_frame)
library(dplyr)
df_preprocess2 <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date`,
tested = `Total.tests`,
confirmed = `Total.cases`,
`confirmed.tested.ratio` = `Cases.tests.ratio`,
`tested.population.ratio` = `Tests.population.ratio`,
`confirmed.population.ratio` = `Cases.population.ratio`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed.tested.ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested.population.ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed.population.ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocessed2 <- df_preprocess2(data_frame)
View(data_frame)
str(data_frame)
View(data_frame)
df_preprocess2 <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed.tested.ratio` = `confirmed.tested.ratio`,
`tested.population.ratio` = `tested.population.ratio`,
`confirmed.population.ratio` = `confirmed.population.ratio`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed.tested.ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested.population.ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed.population.ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocessed2 <- df_preprocess2(data_frame)
View(data_frame)
column_names <- names(data_frame)
print(column_names)
df_preprocess2 <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed.tested.ratio` = `Confirmed..tested..`,
`tested.population.ratio` = `Tested..population..`,
`confirmed.population.ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed.tested.ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested.population.ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed.population.ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocessed2 <- df_preprocess2(data_frame)
head(df_preprocessed2)
View(df_preprocessed1)
View(df_preprocessed2)
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess2(data_frame)
head(df_preprocessed)
# Print the summary of the processed data frame again
summary(df_preprocessed)
# install.packages("httr")
# install.packages("rvest")
library(dplyr)
library(httr)
library(rvest)
get_wiki_covid19_page <- function() {
# Our target COVID-19 wiki page URL is: https://en.wikipedia.org/w/index.php?title=Template:COVID-19_testing_by_country
# Which has two parts:
# 1) base URL `https://en.wikipedia.org/w/index.php
# 2) URL Query string: `title=Template:COVID-19_testing_by_country`
# Wiki page base
wiki_base_url <- "https://en.wikipedia.org/w/index.php"
# You will need to create a List which has an element called `title` to specify which page you want to get from Wiki
# in our case, it will be `Template:COVID-19_testing_by_country`
query_string <- list(title = "Template:COVID-19_testing_by_country")
# - Use the `GET` function in httr library with a `url` argument and a `query` argument to get a HTTP response
response <- GET(wiki_base_url, query = query_string)
# Use the `return` function to return the response
return(response)
}
response = get_wiki_covid19_page()
print(response)
# Get the root html node from the http response in task 1
wiki_node <- read_html(get_wiki_covid19_page())
wiki_node
# Get the table node from the root html node
table_node <- html_nodes(wiki_node, "table")
table_node
# From the output of the above command, we notice that there are 4 tables.
# Which one is the desired table? We find out this info using the inspect feature in the browser
# We notice the class of our table starts with "wikitable plainrowheaders ...",
# which corresponds to the 2nd table in the above output
# Note that the count of the table_node index starts from 1. Therefore, index=2
# Read the table node and convert it into a data frame, and print the data frame for review
data_frame <- as.data.frame(html_table(table_node[2]))
head(data_frame)
# Print the summary of the data frame
summary(data_frame)
preprocess_covid_data_frame <- function(data_frame) {
shape <- dim(data_frame)
# Remove the World row
data_frame <- data_frame[!(data_frame$`Country.or.region`=="World"),]
# Remove the last row
data_frame <- data_frame[1:172, ]
# We don't need the Units and Ref columns, so they can be removed
data_frame["Ref."] <- NULL
data_frame["Units.b."] <- NULL
# Renaming the columns
names(data_frame) <- c("country", "date", "tested", "confirmed", "confirmed.tested.ratio", "tested.population.ratio", "confirmed.population.ratio")
# Convert column data types
# Convert column data types
data_frame$country <- as.factor(data_frame$country)
data_frame$date <- as.factor(data_frame$date)
data_frame$tested <- as.numeric(gsub(",","",data_frame$tested))
data_frame$confirmed <- as.numeric(gsub(",","",data_frame$confirmed))
data_frame$'confirmed.tested.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.tested.ratio`))
data_frame$'tested.population.ratio' <- as.numeric(gsub(",","",data_frame$`tested.population.ratio`))
data_frame$'confirmed.population.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.population.ratio`))
return(data_frame)
}
column_names <- names(data_frame)
print(column_names)
library(dplyr)
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country_or_region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess2(data_frame)
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess(data_frame)
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed.tested.ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested.population.ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed.population.ratio`))
)
}
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess(data_frame)
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed_tested_ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested_population_ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed_population_ratio`))
)
}
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess(data_frame)
head(df_preprocessed)
# install.packages("httr")
# install.packages("rvest")
library(dplyr)
library(httr)
library(rvest)
library(dplyr)
get_wiki_covid19_page <- function() {
# Our target COVID-19 wiki page URL is: https://en.wikipedia.org/w/index.php?title=Template:COVID-19_testing_by_country
# Which has two parts:
# 1) base URL `https://en.wikipedia.org/w/index.php
# 2) URL Query string: `title=Template:COVID-19_testing_by_country`
# Wiki page base
wiki_base_url <- "https://en.wikipedia.org/w/index.php"
# You will need to create a List which has an element called `title` to specify which page you want to get from Wiki
# in our case, it will be `Template:COVID-19_testing_by_country`
query_string <- list(title = "Template:COVID-19_testing_by_country")
# - Use the `GET` function in httr library with a `url` argument and a `query` argument to get a HTTP response
response <- GET(wiki_base_url, query = query_string)
# Use the `return` function to return the response
return(response)
}
response = get_wiki_covid19_page()
print(response)
# Get the root html node from the http response in task 1
wiki_node <- read_html(get_wiki_covid19_page())
wiki_node
# Get the table node from the root html node
table_node <- html_nodes(wiki_node, "table")
table_node
# From the output of the above command, we notice that there are 4 tables.
# Which one is the desired table? We find out this info using the inspect feature in the browser
# We notice the class of our table starts with "wikitable plainrowheaders ...",
# which corresponds to the 2nd table in the above output
# Note that the count of the table_node index starts from 1. Therefore, index=2
# Read the table node and convert it into a data frame, and print the data frame for review
data_frame <- as.data.frame(html_table(table_node[2]))
head(data_frame)
# Print the summary of the data frame
summary(data_frame)
preprocess_covid_data_frame <- function(data_frame) {
shape <- dim(data_frame)
# Remove the World row
data_frame <- data_frame[!(data_frame$`Country.or.region`=="World"),]
# Remove the last row
data_frame <- data_frame[1:172, ]
# We don't need the Units and Ref columns, so they can be removed
data_frame["Ref."] <- NULL
data_frame["Units.b."] <- NULL
# Renaming the columns
names(data_frame) <- c("country", "date", "tested", "confirmed", "confirmed.tested.ratio", "tested.population.ratio", "confirmed.population.ratio")
# Convert column data types
# Convert column data types
data_frame$country <- as.factor(data_frame$country)
data_frame$date <- as.factor(data_frame$date)
data_frame$tested <- as.numeric(gsub(",","",data_frame$tested))
data_frame$confirmed <- as.numeric(gsub(",","",data_frame$confirmed))
data_frame$'confirmed.tested.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.tested.ratio`))
data_frame$'tested.population.ratio' <- as.numeric(gsub(",","",data_frame$`tested.population.ratio`))
data_frame$'confirmed.population.ratio' <- as.numeric(gsub(",","",data_frame$`confirmed.population.ratio`))
return(data_frame)
}
column_names <- names(data_frame)
print(column_names)
df_preprocess <- function(data_frame) {
data_frame %>%
filter(`Country.or.region` != "World") %>%
slice(1:172) %>%
select(-Ref., -Units.b.) %>%
rename(
country = `Country.or.region`,
date = `Date.a.`,
tested = `Tested`,
confirmed = `Confirmed.cases.`,
`confirmed_tested_ratio` = `Confirmed..tested..`,
`tested_population_ratio` = `Tested..population..`,
`confirmed_population_ratio` = `Confirmed..population..`
) %>%
mutate(
country = as.factor(country),
date = as.factor(date),
tested = as.numeric(gsub(",", "", tested)),
confirmed = as.numeric(gsub(",", "", confirmed)),
`confirmed_tested_ratio` = as.numeric(gsub(",", "", `confirmed_tested_ratio`)),
`tested_population_ratio` = as.numeric(gsub(",", "", `tested_population_ratio`)),
`confirmed_population_ratio` = as.numeric(gsub(",", "", `confirmed_population_ratio`))
)
}
# call df_preprocess() function and assign it to a new data frame
df_preprocessed <- df_preprocess(data_frame)
head(df_preprocessed)
# Print the summary of the processed data frame again
summary(df_preprocessed)
# Export the data frame to a csv file
write.csv(proper_data_frame,file='covid-19(2023).csv',row.names=FALSE)
# Export the data frame to a csv file
write.csv(df_preprocessed, file='Data/COVID19_tests_by_country.csv',row.names=FALSE)
# Get the total confirmed cases worldwide
confirmed_total <- sum(df_preprocessed[,'confirmed'])
# Get the total tested cases worldwide
tested_total <- sum(df_preprocessed[,'tested'])
# Get the positive ratio (confirmed / tested)
positive_ratio <- confirmed_total/tested_total
round(positive_ratio, 2)
print(column_names)
str(df_preprocessed)
summary(df_preprocessed)
nrows(df_preprocessed)
nrow(df_preprocessed)
library(ggplot2)
# Scatter plot: Tests vs Confirmed Cases
ggplot(df_preprocessed, aes(x = tested, y = confirmed)) +
geom_point(color = "blue", alpha = 0.7) +
labs(title = "COVID-19 Tests vs Confirmed Cases by Country",
x = "Number of Tests Conducted",
y = "Number of Confirmed Cases") +
theme_minimal()
# ====================== Step 6  ======================
# Histogram: Confirmed Population Ratio
ggplot(df_preprocessed, aes(x = confirmed_population_ratio)) +
geom_histogram(binwidth = 5, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Distribution of Confirmed Population Ratio",
x = "Confirmed Population Ratio",
y = "Frequency") +
theme_minimal()
# Calculate quartiles
q1 <- quantile(df_preprocessed$confirmed_population_ratio, 0.25)
q2 <- quantile(df_preprocessed$confirmed_population_ratio, 0.50)  # Median
q3 <- quantile(df_preprocessed$confirmed_population_ratio, 0.75)
# Print the results
cat("Q1 (25th percentile):", q1, "\n")
cat("Q2 (50th percentile - Median):", q2, "\n")
cat("Q3 (75th percentile):", q3, "\n")
